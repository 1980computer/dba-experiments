// Generated by CoffeeScript 1.7.1
(function() {
  window.FramerStudio = {};

  FramerStudio.reset = function() {
    var _ref;
    return (_ref = document.getElementById("FramerRoot")) != null ? _ref.innerHTML = "" : void 0;
  };

  FramerStudio.loadScript = function(path) {
    return document.addEventListener("DOMContentLoaded", function() {
      console.log("script.load " + path);
      return $("body").append($("<script src='" + path + "'>"));
    });
  };

  FramerStudio.compile = function(code) {
    var c, compiledErrorLine, compiledErrorLineNumber, e, err, errorColNumber, errorLineNumber, errorMessage, i, loc, result, source, sourceLines;
    try {
      result = CoffeeScript.compile(code, {
        sourceMap: true,
        filename: "generated.js"
      });
    } catch (_error) {
      e = _error;
      console.log("Compile error:", e);
      if (e instanceof SyntaxError) {
        errorMessage = e.stack;
        err = new SyntaxError("" + errorMessage + " (compile)");
        err.line = e.location.first_line + 1;
        err.lineNumber = e.location.first_line + 1;
        throw err;
      } else {
        throw e;
      }
    }
    source = result.js;
    try {
      return eval(source);
    } catch (_error) {
      e = _error;
      console.log("Eval error:", e);
      sourceLines = source.split("\n");
      compiledErrorLineNumber = e.line;
      compiledErrorLine = sourceLines[compiledErrorLineNumber - 1];
      errorLineNumber = 0;
      errorColNumber = 0;
      for (i in compiledErrorLine) {
        c = compiledErrorLine[i];
        loc = result.sourceMap.sourceLocation([compiledErrorLineNumber - 1, parseInt(i)]);
        console.log("Line " + i + ", " + loc);
        if (loc[0] > 0) {
          errorLineNumber = loc[0];
          errorColNumber = loc[1];
        }
      }
      err = e.constructor("" + e.message + " (eval)");
      err.lineNumber = errorLineNumber + 1;
      err.line = errorLineNumber + 1;
      throw err;
    }
  };

}).call(this);
